title: Election
on-arrival: {! 
if (typeof Q.TIP_banned === 'undefined') {
    Q.TIP_banned = 1;
}
if (typeof Q.disk_endorsement === 'undefined') {
    Q.disk_endorsement = false;
}
// calculate normalized class voting amounts (0 to 100)
for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
var tipSupport = 0;
for (var party of Q.parties) {
    var party_support = 0;
    for (var c of Q.classes) {
        // but this version is somewhat more entertaining and allows for wilder swings in votes.
        // the other option basically necessitates a multi-class strategy. while the first option allows for a working-class-only strategy.
        if (Q.old_demographics) {
            // okay i'm pretty sure this is wrong, and the hard version is correct
            // basically this allows for "spillover" effects in other demographics.
            // so you can campaign among say the workers and 
            party_support += Q[c]*Q[c+'_'+party];
            // However, there should be a cap on how much party support you can get in a certain demo.
        } else  {
            party_support += Q[c]*Q[c+'_'+party+'_normalized'];
        }
    }
    Q[party + '_support'] = party_support;
    total_support += party_support;
    if (party === 'TIP') {
        tipSupport = party_support;
    }
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply party_normalized*1000 and divide the rounded number by 10.
var normalization_total = total_support;
var tip_transfer_support = 0;
if (Q.TIP_banned && tipSupport > 0) {
    if (Q.disk_endorsement) {
        tip_transfer_support = tipSupport / 2;
    }
    Q.chp_support = (Q.chp_support || 0) + tip_transfer_support;
    Q.TIP_support = 0;
    normalization_total = total_support - tipSupport + tip_transfer_support;
}
if (normalization_total <= 0) {
    normalization_total = 1;
}
for (var party of Q.parties) {
    if (Q.TIP_banned && party === 'TIP') {
        Q[party+'_normalized'] = 0;
        Q[party+'_votes_dec'] = 0;
        Q[party+'_votes'] = 0;
        Q[party + '_votes_disp'] = Q.use_decimals ? 0 : '0.0';
        continue;
    }
    Q[party+'_normalized'] = Q[party + '_support']/normalization_total;
    Q[party+'_votes_dec'] = Math.round(Q[party+'_normalized']*1000)/10;
    if (Q.use_decimals) {
        Q[party+'_votes'] = Q[party+'_votes_dec'];
        Q[party + '_votes_disp'] = Q[party+'_votes'];
    } else {
        Q[party+'_votes'] = Math.round(Q[party+'_normalized']*100);
        Q[party + '_votes_disp'] = Q[party+'_votes_dec'].toFixed(1);
    }
}
!}
go-to: jumpScene

# note: this is a helpful utility to deal with elections and so on.
